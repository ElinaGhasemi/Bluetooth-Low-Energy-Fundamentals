Summary of Exercise 2.

This exercise enabled me to configure My device nrf5340dk_nrf5340 to dynamically change the advertising data. 

This exercise was built on top of exercise 1 of lesson 2. The goal is to focus on 1. advertising parameters  2. Manufacturer-Specific Data, and 3. update the advertising data dynamically. 

This exercise will broadcast non-connectable advertising like the previous exercise with the difference of not using a predefined macro to manage the advertising parameters and fine-control the advertising interval.

Another great part of this exercise is to learn how to dynamically change the content of advertising data. (Advertising data will be created in a way to represent how many times Button 1 is pressed on the board.)

Exercise steps:

1. Create the variable adv_param of type bt_le_adv_param. To create the variable, we need to use maco BT_LE_ADV_PARAM() 

BT_LE_ADV_PARAM(_options, _int_min, _int_max, _peer)
Helper to declare advertising parameters inline.

Parameters
:
_options – Advertising Options . For example, choosing which channel (37, 38, 39) to advertise on. There are 19 options available

_int_min – Minimum advertising interval. (N * 0.625 milliseconds): Less than or equal to the maximum advertising interval. The allowable range for N is 32 to 16384, which translates to 20 ms to 10.24 seconds. The API has predefined values to use for advertising intervals.

_int_max – Maximum advertising interval. (N * 0.625 milliseconds): Larger than or equal to the minimum advertising interval. 

_peer – Peer address, set to NULL for undirected advertising or address of peer for directed advertising.

For this exercise this options were chosen: 

static struct bt_le_adv_param *adv_param =
	BT_LE_ADV_PARAM(BT_LE_ADV_OPT_NONE,
	800,
	801,
	NULL);
	
2. Declare the Manufacturer Specific Data
Manufacturer Specific Data is used to create and include custom data in Bluetooth LE advertising.

2.1 Declare the Company identifier (Company ID)

The first two bytes in the Manufacturer Specific Data are the company identifier as registered in Bluetooth SIG in the Assigned Numbers Document(https://www.bluetooth.com/specifications/assigned-numbers/).

#define COMPANY_ID_CODE            0x0059

2.2 Declare the structure for your custom data

To make the custom data, we can creat a structure adv_mfg_data_type that has two members. The first is the company ID and the second is number_press which represents how many times button 1 is pressed on the board. 

typedef struct adv_mfg_data {
	uint16_t company_code;	    /* Company Identifier Code. */
	uint16_t number_press;      /* Number of times Button 1 is pressed*/
} adv_mfg_data_type;


2.3 Define and initialize a variable of type adv_mfg_data_type that we created in the previous step.

static adv_mfg_data_type adv_mfg_data = {COMPANY_ID_CODE,0x00};

In the next step, we can add a button press callback function that updates the number_press and update the advertising data through the function bt_le_adv_update_data().

3. Include the Manufacturer Specific Data in the advertising packet.

/*Declare the advertising packet */
    static const struct bt_data ad[] = {
    BT_DATA_BYTES(BT_DATA_FLAGS, BT_LE_AD_NO_BREDR),
    BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
    // Include the Manufacturer Specific Data in the advertising packet.
    BT_DATA(BT_DATA_MANUFACTURER_DATA, (unsigned char *) &adv_mfg_data, sizeof(adv_mfg_data)),
};

4. Initialize the Buttons library and set a callback function.

To setup an interrupt (call back function) to be called every time Button 1 is pressed, we use use the DK Buttons and LEDs library.

4.1 Add the init_button() function definition in main.c .

static int init_button(void)
{
	int err;

	err = dk_buttons_init(button_changed);
	if (err) {
		printk("Cannot init buttons (err: %d)\n", err);
	}

	return err;
}

4.2 Call init_button() in main()


err = init_button();

if (err) {

	printk("Button init failed (err %d)\n", err);
	return -1;

}

5. Add the definition of the callback function and update the advertising data dynamically.

We can update the advertising data dynamically from inside the button_changed() callback function. We can use the function bt_le_adv_update_data().

static void button_changed(uint32_t button_state, uint32_t has_changed)
{
	if (has_changed & button_state & USER_BUTTON) {
	adv_mfg_data.number_press += 1;
	bt_le_adv_update_data(ad, ARRAY_SIZE(ad),
			      sd, ARRAY_SIZE(sd));
	}
}

Note: init_button(button_changed and bt_le_adv_update_data) has to be called before bt_enable and bt_le_adv_start.

6. Build and flash the application on your board.

You should notice that LED1 on your board is blinking now. Indicating that your board is advertising.

7. Open nRF Connect for Mobile on your smartphone.

The connection interval has changed from the previous exercise which was between 100-150 ms associated with the BT_LE_ADV_NCONN macro to around 500ms.

8. Tap on Nordic_Beacon to view the advertising data.

You should notice now that the Manufacturer data is included in the advertising With the company ID of Nordic Semiconductor.

9. Tap on the Manufacturer data to change how the data is displayed and select Unsigned Int16 or Manufacturer data (Bluetooth Core 4.1).

10. Press Button 1 on your board

You should observe that the count increments by one every time the button is pressed. You need to be in scanning mode on your phone to see the change. Press SCAN at the top right corner in nRF Connect for Mobile to see the updated data.


By default, the scanning period on nRF Connect for Mobile is set to 45 seconds. You can change the scanning period by going to Settings->Scanner->Scanning Period.




















